# 查询列表指定索引范围的数据（切片）
#     利用索引范围返回多个元素的新列表
# 语法：
# 新的列表 =  列表 [起始索引:结束索引:步长]
# 特点：
#   切片返回的仍然是原数据类型
#   切片返回新的列表，不影响原列表

# 切片的原则：
# 1.包含左不包右（包含起始索引，不包含结束索引）
# 2.起始索引
# 			可以不写，默认是从头开始。但是“：”必须要写。
# 3.结束索引
# 			可以不写，不写默认取完
# 4.步长：指的是取下一个数据的时候迈几步。
# 			步长可以不写，默认为1
# 			步长可以为负数，负数代表倒着走
# 切片得到的是一个新的列表，并不是修改原来的列表。

"""
起始索引: 该参数如果省略，则表示从该列表的最起始位置开始取值，至于是从右边还是左边的起始位置，这个需要看step参数的正负来决定的
结束索引（不包含该索引对应的值）: 如果该参数没有写的话，表示一直取到该列表的‘终点’,至于是正索引的终点还是负索引的终点，同样是取决于step参数的正负
步长: 正负都可以，该参数的绝对值大小决定了列表切片时的步长，而正负号则是决定了切片的方向，为正数时，表示从左往右取值，为负数时表示从右往左取值。
    同样，step参数也可以省略不写，省略不写时，表示默认步长为1，即从左往右以步长为1取值。
    “切取方向非常重要！” 起止方向必须与步长方向一致
"""

li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
li1 = li[:]      # 复制列表
print(li)   # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(li1)   # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(li[0:5:2])    # [1, 3, 5]
print(li[::-1])     # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]列表反转，且不改变原列表
print(li[0::-3])    # [1]  从索引0=值1开始，从右往左，结束索引没有写，终点一直往左走，而列表中从左只有1
print(li[1:5:-1])   # [] 因为当步长为-1表示从右往左取值，而起始索引和结束索引则都为正表示从左往右取值，两者矛盾取不到值
print(li[-1:-5:-1])     # [10, 9, 8, 7]
print(li[:5:-1])  # [10, 9, 8, 7] 步长为-1，表示从右往左取值，而起始索引没有写表示从起始开始，而因为是是从右往左取值，所以这个起始位置就是10，及索引为9到索引为5（不包括5）之间的元素
print(li[-1:-7])    # [] 步长默认为1，从左往右取值，而起始索引-1到结束索引-6决定了从右往左取值，两者矛盾，所以为空。
print(li[1:-7:-1])  # [] 起始索引1在结束索引-7的左边，因此从左往右取值，但步长为-1则决定了从右往左取值，两者矛盾，因此为空。

"""
切记:
    列表切片的方向取决于起始索引、结束索引以及步长，当起始索引在结束索引右边是就是从右往左取值，同理反之。
    当列表通过索引取单个元素是返回的是这个元素而非一个列表，当取连续的几个值时返回的是一个列表
    步长的正负是一定要考虑的，特别是当不写步长的时候
"""
