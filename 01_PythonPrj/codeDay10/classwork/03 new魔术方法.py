"""
__new__方法
python 内置的魔术方法
    作用：创建类的实例并且返回。负责创建类的实例对象
    触发：创建类的实例的时候。在对象创建时首先被调用
    new方法不能随便写，必要要返回类的实例。
"""
"""
详解：
    新创建一个对象的时候，python解释器自动调用类上的__new__()。
    该方法至少要有一个参数cls，代表需要实例化的类，由python解释器自动传入，并且必须返回通过该类新实例化出来的实例对象
    （还记得我们初始化方法__init__()第一个参数self代表的是该类的实例对象，而这个实例正是__new__()返回给它的）。

    我们自己定义的所有的类都可以追溯到基类object上，所以通过类创建对象的时候都会成功自动到基类上的__new__()，从而得到创建好的对象

__new__方法注意事项:
    1.__new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供。
    2.__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，一般return 父类 __new__出来的实例
    3.__init__有一个参数self，就是这个__new__返回的实例,__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值
    4.如果创建对象时传递了自定义参数，且重写了__new__方法，则__new__也必须"预留"该形参,用不用都无所谓,否则__init__()方法将无法获取到该参数
"""


# class Person(object): # 继承自object类
class Person:
    def __new__(cls, *args, **kwargs):
        # 返回父类的new方法
        # return object.__new__(cls, *args, **kwargs)
        print(super().__new__(cls))
        return super().__new__(cls)

    def __init__(self, name):
        print(self, name)


p1 = Person('Zeus')
# print(p1)

# p2 = Person()
# print(p2)


'''
深度详解：
    在Python中，__new__方法是一个重要的魔法方法，它负责在对象创建过程中分配内存空间并返回对象的引用。
    __new__方法是Python中真正的构造器，它在__init__方法之前被调用。
    当你使用类名()创建对象时，Python解释器首先调用__new__方法为对象分配空间，然后将返回的对象引用传递给__init__方法进行初始化
    __new__方法的主要作用有两个：
        在内存中为对象分配空间
        返回对象的引用
        
__new__与__init__的区别：
    执行顺序‌：__new__先执行，__init__后执行
    职责分工‌：__new__负责创建对象（分配内存），__init__负责初始化对象
    返回值‌：__new__必须返回对象的引用，__init__不返回任何值（返回None）

总结：
    重写Python中的__new__方法是一个强大的特性，它允许开发者深入控制对象的创建过程。
    无论是实现单例模式、限制实例数量，还是定制不可变类型的行为，正确使用__new__方法都能带来极大的灵活性。
    记住关键点：__new__负责创建对象，__init__负责初始化对象，且__new__必须返回对象的引用
'''