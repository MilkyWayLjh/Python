"""
通过一个接口，传入不同的对象，调用相同的方法，产生不同的结果
多态实现：
    1. 子类继承父类
    2. 子类重写父类的方法
    3. 调用这个方法
在python语法中，可以在多个子类中重写父类的方法，
这个时候所有的子类和父类中虽然都有相同名字的方法，但是实现的效果是不同的，这就是多态。
即 相同的函数名，传入不同的对象参数，实现不同的效果

多态与函数重载：
    多态：必须是有多个类，且有子父类关系，是类与类之间的关系
    重载：在同一个类中
对于面向对象，多态分为编译时多态和运行时多态。
其中编译时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编译之后会变成两个不同的函数，在运行时谈不上多态。
而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。
"""


# 例如：定义一个动物类
class Animal:
    def run(self):
        print('动物在跑')


# 定义一个猫类
class Cat(Animal):
    def run(self):
        print('猫🐱在跑')


# 定义一个只因类
class Kun(Animal):
    def run(self):
        print('有两只🐔🐓只因在跑')


# 定义一个函数 让动物跑. 定义一个统一的接口(函数)来调用这个方法
# 类型 obj
def run_animal(obj):
    obj.run()


# 相同的函数，传入不同的对象参数，实现不同的效果
run_animal(Animal())
run_animal(Cat())
run_animal(Kun())
