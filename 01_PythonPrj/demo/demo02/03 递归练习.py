# 经典案例
"""
（1）使用递归算法求n！
需求：
    用户输入一个数字，那么就算该数字的阶乘，并打印出来
"""


# 函数必须第一个参数，这个参数的作用是你求取第几个数字的阶乘
def func(n):
    # 因为我们只知道任何数字的阶乘最后都要 * 1，那么这就是递归深度或者说次数
    if n == 1:
        # 那么我们就返回 1，将1返回给调用它的人，就是下面的函数调用
        return 1
    else:
        # 因为n！= n * n-1 ...*1,那么5！= 5*4！
        return n * func(n-1)

# 求5的阶乘，传入一个递归次数5
print(func(5))


"""
（2）使用递归求岁数
需求：
    有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。
    问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。
    问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。
    请问第五个人多大？
"""


def func2(n):
    # 当递归到第一个人的年龄时，说明到了指定深度
    if n == 1:
        # 返回第一个人的年龄10
        return 10
    else:
        # 当没有到达递归深度，就继续拿到上一个人的年龄，并在此基础上+2，最后返回的就是第5个人的年龄，反转过来就是第一个人的年龄
        return 2 + func2(n-1)

# 长度为5
print(func2(5))


"""
（3）使用递归反输出
需求：
    利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来
"""

"""
def func3(n):
    # 当递归到索引为0的时候
    if n == 0:
        # 终止该函数
        return
    # 当没有递归到指定深度时
    else:
        # 要输出列表中的值，因为列表比长度少1，索引必须-1才能拿到对应的值，那么输出的时候的顺序为从后往前
        print(my_list[n-1])
        # 递归次数
        func3(n-1)

# 定义一个空列表
my_list = []
# 使用for循环来拿到5个字符，并将5个字符存入列表中
for i in range(1, 6):
    my_str = input(f"请输入第{i}个字符：")
    my_list.append(my_str)
# 传入列表的长度，因为列表的长度为5，那么也就是5个字符
func3(len(my_list))
"""

"""
（4）使用递归求斐波那契数列
需求：
    使用递归算法，求指定位数的斐波那契数列
"""


def func4(n):
    if n == 1 or n == 2:
        return 1
    else:
        return func4(n-1) + func4(n-2)

print(func4(5))


"""
（5）一个人赶着鸭子去每个村庄卖，每经过一个村子卖去所赶鸭子的一半又一只。这样他经过了七个村子后还剩两只鸭子，问他出发时共赶多少只鸭子?
"""


def fn(n):
    if n == 7:
        return 2
    else:
        result = fn(n+1)*2+2
        return result
print(f'一共有{fn(0)}只鸭子')

