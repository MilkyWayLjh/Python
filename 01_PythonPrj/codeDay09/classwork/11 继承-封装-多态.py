# 多态
"""
    在python语法中，可以在多个子类中重写父类的方法，
    这个时候所有的子类和父类中虽然都有相同名字的方法，但是实现的效果是不同的，这就是多态。
    即 相同的函数名，传入不同的对象参数，实现不同的效果

鸭子类型（英语：duck typing）是动态类型的一种风格。
    在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由当前方法和属性的集合决定
    “当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”
    我们并不关心对象是什么类型，到底是不是鸭子，只关心行为
    鸭子类型在动态语言中经常使用，非常灵活，使得python不像java那样专门去弄一大堆的设计模式

    关注的不是对象的类型，而是关注对象的使用。因此在python中多态的实现可以不用继承关系,可以是普通的类与类

增加了程序的灵活性：以不变应万变，不论对象千变万化，使用者都是同一种形式去调用。比如都是fn(obj)
增加了程序的扩展性：可以在调用对象的函数中统一扩展功能
"""


# 例如：定义一个动物类
class Animal:
    def run(self):
        print('动物在跑')


# 定义一个猫类
class Cat(Animal):
    def run(self):
        # super().run()
        print('猫🐱在跑')


# 定义一个鸡类
class Kun(Animal):
    def run(self):
        print('有两只 只因🐔🐓在跑')


# 定义一个函数 让动物跑
def run_animal(animal):
    animal.run()


# 相同的函数，传入不同的参数，实现不同的效果
run_animal(Animal())
run_animal(Cat())
run_animal(Kun())


# 继承
"""
定义:
    通过继承，子类可以拥有父类的资源(属性和方法).子类可以拥有自己的资源.
继承解决的问题:
    共性提取
B类继承A类:
    A类叫做  父类, 基类, 超类
    B类叫做  子类, 派生类

#  B类继承A类
class A:
    pass

class B(A):
    pass
"""


# 封装
"""
● 将相同特点的属性和方法封装在类中进行调用
● 对外隐藏内部实现细节，对外提供访问
"""
