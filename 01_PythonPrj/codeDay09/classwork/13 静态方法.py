class Person:
    @staticmethod   # 装饰器
    def eat():
        print('吃饭')

    @staticmethod   # 装饰器
    def run():
        print('跑')


# 类调用（一般用这种方式）
Person.eat()
Person.run()

# 对象调用
p1 = Person()
p1.eat()
p1.run()
"""
用类去调用静态方法，而不是实例去调用的原因：
    1. 语义清晰性
        静态方法不依赖于实例状态，与具体对象无关
        使用 Person.eat() 明确表示这是类级别的操作
        避免误导其他开发者认为该方法需要实例数据
    2. 性能考虑
        实例调用需要先创建对象，增加了不必要的开销
        类调用直接访问方法，无需实例化过程
    3. 设计意图表达
        静态方法通过 @staticmethod 装饰器定义，表明其独立于实例
        不接收 self 参数，确实不涉及对象本身的属性和状态
        使用类调用更能体现静态方法的设计初衷
"""