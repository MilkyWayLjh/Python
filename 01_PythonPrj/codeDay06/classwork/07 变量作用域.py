"""
变量作用域：
变量的生效范围
作用域：
    全局作用域：函数外部都是全局作用域
    局部作用域：函数内部就是局部作用域 (局部变量域就像一个 栈，仅仅是暂时的存在，依赖创建该局部作用域的函数是否处于活动的状态。)
变量：
    全局变量：全局作用域中定义的变量
        可以在全局作用域中进行修改和访问，只能在局部作用域中访问,不能修改
        (一般建议尽量少定义全局变量，因为全局变量在模块文件运行的过程中会一直存在，占用内存空间。)
    局部变量：局部作用域中定义的变量
        只能在局部作用域中进行修改和访问

global关键字:
    将变量声明为全局变量(如果需要在函数内部对全局变量赋值，需要在函数内部通过global语句声明该变量为全局变量)
"""

# 全局变量
num1 = 100


def fn1():
    global num1  # global语句应在使用变量前声明
    num1 = 200
    print(num1)


print(num1)
fn1()
print(num1)


def fn2():
    name = 'hello'
    print(name)


fn2()
# print(name)


# 为什么要用变量作用域
"""
    局部变量可以在不同的函数中可以使用相同的变量名字。 
    局部变量在函数执行完毕之后立即释放,节约内存资源.
"""

# 如何选择变量的作用域
"""
    如果变量的数据只在函数内部使用，请使用局部变量。
    如果变量的数据函数内部和外部都要使用，请使用全局变量。
"""

"""
作用域链：变量名解析LEGB法则
搜索变量名的优先级：局部作用域 > 嵌套作用域 > 全局作用域 > 内置作用域
LEGB法则： 当在函数中使用未确定的变量名时，Python会按照优先级依次搜索4个作用域，以此来确定该变量名的意义。
        首先搜索局部作用域(L)，之后是上一层嵌套结构中def或lambda函数的嵌套作用域(E)，之后是全局作用域(G)，最后是内置作用域(B)。
        按这个查找原则，在第一处找到的地方停止。如果没有找到，则会出发NameError错误。
"""

"""
L(local)局部作用域

E(enclosing)嵌套作用域:
    E也包含在def关键字中，E和L是相对的，E相对于更上层的函数而言也是L。
    与L的区别在于，对一个函数而言，L是定义在此函数内部的局部作用域，而E是定义在此函数的上一层父级函数的局部作用域。
    主要是为了实现Python的闭包，而增加的实现。（存在关键字'nonlocal'）
    
G(global)全局作用域 (注意：全局作用域的作用范围仅限于单个模块文件内)
    即在模块层次中定义的变量，每一个模块都是一个全局作用域。
    也就是说，在模块文件顶层声明的变量具有全局作用域，从外部开来，模块的全局变量就是一个模块对象的属性。

B(built-in)内置作用域
    系统内固定模块里定义的变量，如预定义在builtin 模块内的变量。
    
合称：LEGB法则
"""
